<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string></string>
	<key>category</key>
	<string>Internet</string>
	<key>connections</key>
	<dict>
		<key>24CA32DC-9AD5-4264-8631-804F1BD2E097</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>557B747D-8C10-41DE-BC97-DCBA895B7AA4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Mathias Balling</string>
	<key>description</key>
	<string></string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Github Search</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>gh</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>import json
import sys
import urllib.request

# Get the full query entered by the user in Alfred
full_query = sys.argv[1].strip()

# Split the query to check if it's a repo, user, or userrepos search
parts = full_query.split(' ', 1)

# Default search type is 'repo', unless specified
search_type = 'r'
query = ''

if len(parts) == 2:
    search_type, query = parts[0], parts[1]
else:
    query = parts[0]

# GitHub API URLs for different search types
if search_type == 'u':
    github_url = f"https://api.github.com/search/users?q={query}&amp;per_page=10"
elif search_type == 'ur':
    github_url = f"https://api.github.com/users/{query}/repos?per_page=10"
else:  # Default to 'repo' search
    github_url = f"https://api.github.com/search/repositories?q={query}&amp;per_page=10"

# Fetch results from GitHub
request = urllib.request.Request(github_url, headers={
    'User-Agent': 'Alfred GitHub Search',
    'Authorization': 'token #API#'
})
response = urllib.request.urlopen(request)
data = json.loads(response.read())

# Prepare the results for Alfred in JSON format
results = {
    "items": []
}

# If searching for repos
if search_type == 'r':
    for repo in data['items']:
        repo_name = repo['full_name']
        repo_description = repo.get('description', 'No description available.')
        repo_url = repo['html_url']
        
        results['items'].append({
            "title": f"{repo_name} (Repository)",
            "subtitle": repo_description,
            "arg": repo_url,
            "icon": {
                "path": "github_repo_icon.png"  # Optional: GitHub repo icon
            }
        })

# If searching for users
elif search_type == 'u':
    for user in data['items']:
        user_login = user['login']
        user_url = user['html_url']
        
        results['items'].append({
            "title": f"{user_login} (User)",
            "subtitle": f"View {user_login}'s profile on GitHub",
            "arg": user_url,
            "icon": {
                "path": "github_user_icon.png"  # Optional: GitHub user icon
            }
        })

# If searching for repositories of a specific user
elif search_type == 'ur':
    if len(data) == 0:
        results['items'].append({
            "title": "No repositories found",
            "subtitle": f"User {query} does not have any repositories or does not exist.",
            "arg": "",
            "icon": {
                "path": "github_user_icon.png"
            }
        })
    else:
        for repo in data:
            repo_name = repo['full_name']
            repo_description = repo.get('description', 'No description available.')
            repo_url = repo['html_url']
            
            results['items'].append({
                "title": f"{repo_name} (User's Repository)",
                "subtitle": repo_description,
                "arg": repo_url,
                "icon": {
                    "path": "github_repo_icon.png"
                }
            })

# Output the results to Alfred
print(json.dumps(results))
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Github</string>
				<key>type</key>
				<integer>9</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>24CA32DC-9AD5-4264-8631-804F1BD2E097</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>skipqueryencode</key>
				<false/>
				<key>skipvarencode</key>
				<false/>
				<key>spaces</key>
				<string></string>
				<key>url</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>557B747D-8C10-41DE-BC97-DCBA895B7AA4</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>24CA32DC-9AD5-4264-8631-804F1BD2E097</key>
		<dict>
			<key>xpos</key>
			<real>360</real>
			<key>ypos</key>
			<real>290</real>
		</dict>
		<key>557B747D-8C10-41DE-BC97-DCBA895B7AA4</key>
		<dict>
			<key>xpos</key>
			<real>605</real>
			<key>ypos</key>
			<real>295</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>webaddress</key>
	<string></string>
</dict>
</plist>
